{% extends 'base.html.twig' %}

{% block body %}
    <script>
        document.body.addEventListener('click', function (event) {
            const btn = event.target;

            // PrÃ¼fen, ob der geklickte Button in einem Formular ist
            if (btn.matches('button[name^="protected["], button[name="delete"]')) {
                event.preventDefault();

                const form = btn.closest('form');
                if (!form) return;

                // Erstellen Sie das FormData-Objekt
                const formData = new FormData(form);

                // Den geklickten Button explizit hinzufÃ¼gen, da preventDefault() die automatische Ãœbernahme verhindert
                const {name, value} = btn;
                if (name) {
                    formData.set(name, value);
                }

                // Optional: Markieren, dass via JS gesendet wird
                formData.append('submission_method', 'js');

                fetch(form.action, {
                    method: 'POST',
                    body: formData,
                    credentials: 'same-origin'
                })
                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Request failed with status ' + response.status);
                        }
                        // Erfolgreich => Button toggeln
                        if (btn.value === 'true') {
                            // Wir haben den Video-Status jetzt auf "geschÃ¼tzt" gesetzt
                            // => Button wird zum "Unlock"-Button
                            btn.value = 'false';
                            btn.title = 'Unlock video';
                            btn.textContent = 'ðŸ”’'; // neues Icon
                        } else {
                            // Wir haben den Video-Status jetzt auf "unprotected" gesetzt
                            // => Button wird zum "Lock"-Button
                            btn.value = 'true';
                            btn.title = 'Lock video';
                            btn.textContent = 'ðŸ”“'; // neues Icon
                        }
                        // 2. Delete-Button im selben Formular ansprechen
                        const deleteBtn = form.querySelector('button[name^="delete["]');

                        if (!deleteBtn) {
                            // Falls kein Delete-Button vorhanden ist, gibt es nichts zu tun
                            return;
                        }

                        // Falls das Video nun geschÃ¼tzt ist, deaktivieren wir den Delete-Button
                        if (btn.value === 'false') {
                            deleteBtn.disabled = true;
                            deleteBtn.classList.add('btn-disabled');
                        } else {
                            // Video ist ungeschÃ¼tzt => Delete-Button aktivieren
                            deleteBtn.disabled = false;
                            deleteBtn.classList.remove('btn-disabled');
                        }
                    })
                    .catch(error => {
                        console.error('Fetch error:', error);
                    });
            }
        });
    </script>
    <div class="contentBlock">
        <h2>Video List</h2>

        <table class="video-list">
            <thead>
            <tr>
                <th colspan="2">Video</th>
                <th>Camera</th>
                <th>Date</th>
                <th>Size</th>
                <th></th>
            </tr>
            </thead>
            {% for video in videos %}
                <tr>
                    <td class="video">
                        <video width="212" height="120" preload="none" controls
                               src="{{ path('video_stream', {uid: video.uid}) }}"
                               poster="{{ path('video_thumbnail', {uid: video.uid}) }}"></video>
                    </td>
                    <td class="title">{{ video.title }}</td>
                    <td>{{ video.cameraType.value }}</td>
                    <td>{{ video.recordTime|date() }}<br>{{ video.duration }} sec</td>
                    <td>{{ (video.size / 1048576)|number_format(2) }} MB</td>
                    <td>
                    <form action="{{ path('list_videos') }}" method="POST" name="video-{{ video.uid }}">
                        <div class="btn-group">
                            {% if video.isProtected %}
                                <button type="submit" class="btn btn-icon btn-lock btn-group" name="protected[{{ video.uid }}]" value="false" title="Unlock video">&#128274;</button>
                            {% else %}
                                <button type="submit" class="btn btn-icon btn-lock btn-group" name="protected[{{ video.uid }}]" value="true" title="Lock video">&#128275;</button>
                            {% endif %}
                            {% if video.isProtected %}
                                <button type="submit" disabled class="btn btn-icon btn-delete btn-group btn-disabled" name="delete[{{ video.uid }}]" value="" title="Delete video">&#128465;</button>
                            {% else %}
                                <button type="submit" class="btn btn-icon btn-delete btn-group" name="delete[{{ video.uid }}]" value="" title="Delete video">&#128465;</button>
                            {% endif %}
                            <a href="{{ path('video_download', {uid: video.uid}) }}" class="btn btn-icon btn-download btn-group" title="Download Video">&#128229;</a>
                        </div>
                    </form>
                    </td>
                </tr>
            {% endfor %}
        </table>
    </div>
{% endblock %}
